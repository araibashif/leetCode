/*Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
*/
Solution : 
        class Solution {
    public int[] topKFrequent(int[] nums, int k) {
      HashMap<Integer,Integer> map = new HashMap<>();
        ArrayList<Integer> arr = new ArrayList<>();
        for(int n: nums){
            map.put(n,map.getOrDefault(n,0)+1);
        }
        HashSet<Integer> set = new HashSet<>();
        int number =0;
        while(k!=0){
            int max = Integer.MIN_VALUE;
            for(int num:map.keySet()){
                int val = map.get(num);
                if(!set.contains(num) && val>max){
                    max=val;
                    number = num;
                }
            }
          
            arr.add(number);
            set.add(number);
            k--;
        }
       int[] res = new int[arr.size()];
        for(int i=0;i<arr.size();i++){
            res[i]=arr.get(i);
        }
         
        return res;
    }
}
