/*
Given a string s, sort it in decreasing order based on the frequency of characters, and return the sorted string.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
*/


Solution :
class Solution {
    public String frequencySort(String s) {
    HashMap<Character,Integer> map = new HashMap<>();
        HashSet<Character> set = new HashSet<>();
        for(char ch:s.toCharArray()){
            map.put(ch,map.getOrDefault(ch,0)+1);
        }
        StringBuilder sb = new StringBuilder(); 
        char chars=' '; 
        //System.out.print(map);
        for(char ch: map.keySet()){
            int max = Integer.MIN_VALUE;
             for(char c:map.keySet()){
                 int val = map.get(c);
                 if(!set.contains(c) && val>max ){
                     max=val;
                     chars = c;
                 }
             }
        //System.out.print(max);
            //System.out.print(chars);
            for(int i=0;i<max;i++){
                   
                sb.append(chars);
            }
            set.add(chars);
        }
        return sb.toString();
    }
}
